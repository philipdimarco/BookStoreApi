using BookStoreApi.Models;
using System.Linq;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using BookStoreApi.Helpers;
using BookStoreApi.Entities;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using BookStoreApi.Repositories.UnitOfWork;
using BookStoreApi.Services;

namespace BookStoreApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly AuthUtils _authUtils;
        private readonly IUnitOfWork _unitOfWork;

        public AuthController(AuthUtils authUtils, IUnitOfWork unitOfWork)
        {
            _authUtils = authUtils ?? throw new ArgumentNullException(nameof(authUtils));
            _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork));
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] UserDto userDto)
        {

            User user = ObjectMapperExtension.FromUserDto(userDto, _authUtils);

            //PhD.... Save User to the database
            await _unitOfWork.AppUsersRepository.AddSingleAsync(user);
            //_authUtils.CreatePasswordHash(userDto.Password, out byte[] passwordHash, out byte[] passwordSalt);
            //User user = new User()
            //{
            //    PasswordHash = passwordHash,
            //    PasswordSalt = passwordSalt,
            //    Username = userDto.Username
            //};
            await _unitOfWork.SaveChangesAsync();
            return Ok();
        }


        [HttpPost("signon")]
        public async Task<IActionResult> SignOn([FromBody] UserDto userDto)
        {
            if (userDto == null)
            {
                return BadRequest("Invalid user.");
            }

            // get user from db
            var userEntity = await _unitOfWork.AppUsersRepository.GetByUserNameAsync(userDto.Username);
            // if user not in db return bad request
            if (userEntity == null)
            {
                return NotFound("User not registered.");
            }

            if (!_authUtils.VerifyPasswordHash(userDto.Password, userEntity.PasswordHash, userEntity.PasswordSalt))
            {
                return BadRequest("Invalid credentials.");
            }

            string token = _authUtils.CreateToken(userEntity);
            return Ok(token);
        }


        /*
        [HttpPost(Name = "signon")]
        public async Task<IActionResult> Login([FromBody] UserDto userDto)
        {
            if (user.UserName == "admin@mohamadlawand.com" && user.Password == "P@ssword")
            {
                var issuer = builder.Configuration["Jwt:Issuer"];
                var audience = builder.Configuration["Jwt:Audience"];
                var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]));
                var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

                // Now its ime to define the jwt token which will be responsible of creating our tokens
                var jwtTokenHandler = new JwtSecurityTokenHandler();

                // We get our secret from the appsettings
                var key = Encoding.ASCII.GetBytes(builder.Configuration["Jwt:Key"]);

                // we define our token descriptor
                // We need to utilise claims which are properties in our token which gives information about the token
                // which belong to the specific user who it belongs to
                // so it could contain their id, name, email the good part is that these information
                // are generated by our server and identity framework which is valid and trusted
                var tokenDescriptor = new SecurityTokenDescriptor
                {
                    Subject = new ClaimsIdentity(new[]
                    {
                        new Claim("Id", "1"),
                        new Claim(JwtRegisteredClaimNames.Sub, user.UserName),
                        new Claim(JwtRegisteredClaimNames.Email, user.UserName),
                        // the JTI is used for our refresh token which we will be convering in the next video
                        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
                    }),
                    // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                    // but since this is a demo app we can extend it to fit our current need
                    Expires = DateTime.UtcNow.AddHours(6),
                    Audience = audience,
                    Issuer = issuer,
                    // here we are adding the encryption alogorithim information which will be used to decrypt our token
                    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
                };

                var token = jwtTokenHandler.CreateToken(tokenDescriptor);

                var jwtToken = jwtTokenHandler.WriteToken(token);

                return Results.Ok(jwtToken);
            }
            return Results.Unauthorized();
        }
        */
    }
}
